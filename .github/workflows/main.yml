# This is a basic workflow to help you get started with Actions
# if: ${{ success() }}
# GITHUB_TOKEN: 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
# SONAR_TOKEN: a2c556936cb882c6ee105f462fe691fc341db1ab

# name: IC

# # Controls when the action will run.
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]



#   # Allows you to run this workflow manually from the Actions tabb
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:

#   ic:
#     runs-on: ubuntu-latest
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#         with:
#             node-version: 14.16.1

#       - uses: actions/setup-java@v1
#         with:
#             java-version: '11.x'

#       # # Runs a single command using the runners shelll ss
#       # - name: Install node.js packages
#       #   run: npm install

#       # - name: configure execution authorization
#       #   run: chmod +x mvnw

#       # - name: execute java unit test
#       #   run: npm run ci:backend:test

#       # - name: execute front unit test
#       #   run: npm run ci:frontend:test

#       # # create .jar comme as he goes in production
#       # - name: Create .jar file
#       #   run: ./mvnw -ntp verify -DskipTests --batch-mode "-Pprod" "-Pe2e" "-Denforcer.skip=true"

#       # - name: create database and execute .jar file
#       #   run: npm run ci:e2e:prepare:docker

#       # - name: execute test
#       #   run: npm run ci:e2e:run

#       # - name: stop docker process
#       #   run: npm run ci:e2e:teardown

#   sonarcloud:
#     name: SonarCloud
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   # deploy:
#   #   needs: sonar
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v2
#   #     - uses: actions/setup-node@v1
#   #       with:
#   #           node-version: 14.16.1

#   #     - uses: actions/setup-java@v1
#   #       with:
#   #           java-version: '11.x'

#       # - uses: AkhileshNS/heroku-deploy@v3.12.12
#       #   with:
#       #       heroku_api_key: "533c1b61-0466-4b77-95aa-b14f764287ab"
#       #       heroku_app_name: "tpril" #Must be unique in Heroku
#       #       heroku_email: "rrobin-vilmus@hotmail.com"
name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar



